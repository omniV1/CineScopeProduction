@using CineScope.Client.Services
@using CineScope.Client.Services.Auth
@using CineScope.Shared.DTOs
@using CineScope.Client.Shared.Profile

@inherits LayoutComponentBase
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
        <!-- Navigation drawer for side menu -->
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1" ClipMode="DrawerClipMode.Always" Class="drawer-layout">
            <!-- Header stays pinned at the top -->
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">CineScope</MudText>
            </MudDrawerHeader>

            <!-- Flex container for scrollable nav + bottom profile -->
            <div class="drawer-body">
                <!-- Scrollable navigation menu -->
                <div class="drawer-nav">
                    <AuthorizeView>
                        <Authorized>
                            <MudNavMenu>
                                <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                                <MudNavLink Href="movies" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">Movies</MudNavLink>
                                <MudNavLink Href="profile" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">My Profile</MudNavLink>
                                <MudNavLink Href="my-reviews" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.RateReview">My Reviews</MudNavLink>
                                <MudNavLink Href="admin" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AdminPanelSettings">Admin Dashboard</MudNavLink>
                            </MudNavMenu>
                        </Authorized>
                        <NotAuthorized>
                            <MudNavMenu>
                                <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                                <MudNavLink Href="movies" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Movie">Movies</MudNavLink>
                                <MudDivider Class="my-2" />
                                <MudNavLink Href="login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
                                <MudNavLink Href="register" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PersonAdd">Register</MudNavLink>
                            </MudNavMenu>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>

                <!-- Bottom profile section -->
                <AuthorizeView>
                    <Authorized>
                        <div class="drawer-bottom">
                            <MudDivider Class="my-2" />
                            <MudMenu AnchorOrigin="Origin.BottomCenter">
                                <ActivatorContent>
                                    <div style="cursor: pointer;" class="px-4 pb-2">
                                        <div class="profile-name">@context.User.Identity.Name</div>
                                        <ProfilePictureDisplay Url="@GetProfilePictureUrl(context)"
                                                               Username="@context.User.Identity.Name"
                                                               Size="Size.Medium"
                                                               Width="40"
                                                               Height="40" />
                                    </div>
                                </ActivatorContent>
                                <ChildContent>
                                    <MudText Typo="Typo.body2" Class="px-4 py-2">@context.User.Identity.Name</MudText>
                                    <MudDivider Class="mb-2" />
                                    <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/profile"))">My Profile</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/my-reviews"))">My Reviews</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/admin"))">Admin Dashboard</MudMenuItem>
                                    <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                                </ChildContent>
                            </MudMenu>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </MudDrawer>

        <!-- Main content area -->
        <MudMainContent>
            <!-- Container for page content with padding -->
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
                <!-- Render the current page content -->
                @Body
            </MudContainer>
        </MudMainContent>
</CascadingAuthenticationState>

<style>
    .drawer-layout {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .drawer-body {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        overflow: hidden;
    }

    .drawer-nav {
        overflow-y: auto;
        padding-bottom: 1rem;
    }

    .drawer-bottom {
        padding: 1rem;
        border-top: 1px solid rgba(0, 0, 0, 0.12);
    }
</style>

@code {
    /// <summary>
    /// Tracks whether the navigation drawer is open.
    /// </summary>
    private bool _drawerOpen = true;

    /// <summary>
    /// Toggles the navigation drawer open/closed state.
    /// </summary>
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    /// <summary>
    /// Logs out the current user.
    /// </summary>
    private async Task Logout()
    {
        await AuthService.Logout();
        Snackbar.Add("You have been logged out", Severity.Success);
        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    /// Gets the user's profile picture URL from the authentication context.
    /// </summary>
    private string GetProfilePictureUrl(AuthenticationState context)
    {
        try
        {
            // Debug: list all claims
            foreach (var claim in context.User.Claims)
            {
                Console.WriteLine($"Claim: {claim.Type} = {claim.Value}");
            }

            // Check for ProfilePictureUrl claim
            var profilePictureClaim = context.User.FindFirst("ProfilePictureUrl");

            if (profilePictureClaim != null && !string.IsNullOrWhiteSpace(profilePictureClaim.Value))
            {
                Console.WriteLine($"Found profile picture URL: {profilePictureClaim.Value}");
                return profilePictureClaim.Value;
            }

            // If user is authenticated but no profile picture claim found,
            // use avatar8.svg since we know it exists
            if (context.User.Identity.IsAuthenticated)
            {
                Console.WriteLine("User authenticated but no profile picture claim found, using avatar8.svg");
                return "/profile-pictures/avatar8.svg";
            }

            // Default fallback
            return "/profile-pictures/default.svg";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting profile picture: {ex.Message}");
            return "/profile-pictures/default.svg";
        }
    }
}