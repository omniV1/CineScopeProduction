@using System.Net.Http.Json
@using CineScope.Client.Services
@using CineScope.Client.Services.Auth
@using CineScope.Shared.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AuthService AuthService

<MudCard Elevation="3" Class="create-review-form mb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">Write a Review</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ValidationDelay="0">
        <MudCardContent>
            <!-- Review text first - this is the primary action -->
            <MudTextField T="string" Label="Your Review" @bind-Value="review.Text"
                          Required="true" RequiredError="Review text is required"
                          Variant="Variant.Outlined" Lines="5"
                          Counter="1000" MaxLength="1000"
                          HelperText="Share your thoughts about this movie"
                          Class="mb-4" />

            <!-- Rating section with better visual grouping -->
            <MudPaper Elevation="0" Class="py-3 px-4 mb-3" Style="background-color: rgba(255,255,255,0.05); border-radius: 8px;">
                <div class="d-flex flex-column gap-2">
                    <MudText Typo="Typo.subtitle1">Rate this movie</MudText>
                    <div class="d-flex align-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            var starValue = i;
                            <div @onclick="() => SetRating(starValue)" style="cursor: pointer; padding: 4px;">
                                @if (ratingValue >= starValue)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Large" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.StarOutline" Color="Color.Warning" Size="Size.Large" />
                                }
                            </div>
                        }
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="ml-2">
                            @(ratingValue > 0 ? $"{ratingValue} star{(ratingValue > 1 ? "s" : "")}" : "Select a rating")
                        </MudText>
                    </div>
                </div>
            </MudPaper>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4" Dense="true">@errorMessage</MudAlert>
            }

            @if (contentWarning != null && contentWarning.Any())
            {
                <MudAlert Severity="Severity.Warning" Class="mt-4">
                    <MudText>Content Warning</MudText>
                    <MudText Typo="Typo.body2">
                        Your review contains content that may violate our community guidelines.
                        Please remove the following terms: @string.Join(", ", contentWarning)
                    </MudText>
                </MudAlert>
            }
        </MudCardContent>

        <MudCardActions Class="pb-4 px-4">
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@Reset">Reset</MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       Disabled="@(isLoading || ratingValue == 0)" OnClick="@SubmitReview">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Submitting</MudText>
                }
                else
                {
                    <MudText>Submit Review</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    private MudForm form;
    private bool success;
    private string[] errors = Array.Empty<string>();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private List<string> contentWarning = null;

    /// <summary>
    /// The ID of the movie being reviewed.
    /// </summary>
    [Parameter]
    public string MovieId { get; set; } = string.Empty;

    /// <summary>
    /// The ID of the current user creating the review.
    /// </summary>
    [Parameter]
    public string CurrentUserId { get; set; } = string.Empty;

    /// <summary>
    /// Event callback triggered when a review is successfully submitted.
    /// </summary>
    [Parameter]
    public EventCallback<ReviewDto> OnReviewSubmitted { get; set; }

    /// <summary>
    /// Review data model.
    /// </summary>
    private ReviewDto review = new()
        {
            Rating = 0,
            Text = string.Empty,
            CreatedAt = DateTime.Now
        };

    /// <summary>
    /// Rating value for the star rating control.
    /// We use this separate property because MudRating works with int but our ReviewDto needs the right type.
    /// </summary>
    private int ratingValue = 0;

    /// <summary>
    /// Initializes the component.
    /// Sets up the review with the movie ID and current user ID.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"CreateReview initialized with MovieId: {MovieId}");

        // Set the movie ID from parameter
        review.MovieId = MovieId;

        // Set the user ID from parameter or get current user
        if (string.IsNullOrEmpty(CurrentUserId))
        {
            var user = await AuthService.GetCurrentUser();
            if (user != null)
            {
                review.UserId = user.Id;
                review.Username = user.Username;
                Console.WriteLine($"Using authenticated user: {user.Username} (ID: {user.Id})");
            }
        }
        else
        {
            review.UserId = CurrentUserId;
            Console.WriteLine($"Using provided user ID: {CurrentUserId}");
        }
    }

    /// <summary>
    /// Sets the rating value directly through manual star interaction.
    /// This bypasses the MudRating component's binding issues.
    /// </summary>
    private void SetRating(int value)
    {
        Console.WriteLine($"Setting rating from {ratingValue} to {value}");
        ratingValue = value;
        StateHasChanged();
    }

    /// <summary>
    /// Validates review content against banned word list.
    /// </summary>
    private async Task<bool> ValidateContent()
    {
        try
        {
            Console.WriteLine("Validating review content...");

            // Call the content filter API
            var response = await Http.PostAsJsonAsync("api/ContentFilter/validate", review.Text);

            if (response.IsSuccessStatusCode)
            {
                // Parse the response
                var result = await response.Content.ReadFromJsonAsync<ContentFilterResult>();

                // If content is approved, return true
                if (result.IsApproved)
                {
                    contentWarning = null;
                    Console.WriteLine("Content validation passed");
                    return true;
                }

                // If content is not approved, store the violation words
                contentWarning = result.ViolationWords;
                Console.WriteLine($"Content validation failed: {string.Join(", ", contentWarning)}");
                return false;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Content validation API error: {response.StatusCode} - {errorContent}");
                throw new Exception($"Content validation failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Log the error (in a real app)
            Console.WriteLine($"Content validation error: {ex.Message}");

            // For testing purposes, allow content in case of API failure
            return true;
        }
    }

    /// <summary>
    /// Submits the review after validation.
    /// </summary>
    private async Task SubmitReview()
    {
        // Ensure auth token is attached to the request
        await AuthService.EnsureAuthHeaderAsync();

        // Validate the form
        await form.Validate();

        Console.WriteLine($"After validation - success={success}, errors={string.Join(", ", errors)}");

        if (!success)
        {
            Console.WriteLine("Form validation failed - review not submitted");
            return;
        }

        // Check if user has selected a rating
        if (ratingValue == 0)
        {
            errorMessage = "Please select a rating";
            Console.WriteLine("Rating validation failed - no stars selected");
            return;
        }

        try
        {
            // Set loading state
            isLoading = true;
            errorMessage = string.Empty;
            Console.WriteLine("Starting review submission process");

            // First, validate content against banned word list
            if (!await ValidateContent())
            {
                errorMessage = "Review contains inappropriate content. Please revise.";
                Snackbar.Add(errorMessage, Severity.Warning);
                isLoading = false;
                return;
            }

            // Ensure we have a user ID
            if (string.IsNullOrEmpty(review.UserId))
            {
                var user = await AuthService.GetCurrentUser();
                if (user == null)
                {
                    errorMessage = "You must be logged in to submit a review.";
                    Snackbar.Add(errorMessage, Severity.Error);
                    isLoading = false;
                    return;
                }
                review.UserId = user.Id;
                review.Username = user.Username;
            }

            // Set the rating from the MudRating component
            review.Rating = (double)ratingValue;

            // Set current date/time
            review.CreatedAt = DateTime.Now;

            Console.WriteLine($"Submitting review: MovieId={review.MovieId}, UserId={review.UserId}, Rating={review.Rating}");

            // Send review to the API
            var response = await Http.PostAsJsonAsync("api/Review", review);

            Console.WriteLine($"Review submission response: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // Parse the created review from response
                var createdReview = await response.Content.ReadFromJsonAsync<ReviewDto>();

                // Show success message
                Snackbar.Add("Review submitted successfully!", Severity.Success);

                // Notify parent component
                if (createdReview != null)
                {
                    await OnReviewSubmitted.InvokeAsync(createdReview);
                }

                // Reset the form
                Reset();
            }
            else
            {
                // Handle error response
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {errorContent}");
                errorMessage = $"Failed to submit review: {response.StatusCode}";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine($"Review submission exception: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            // Reset loading state
            isLoading = false;
        }
    }

    /// <summary>
    /// Resets the review form to default values.
    /// </summary>
    private void Reset()
    {
        review.Rating = 0;
        ratingValue = 0;
        review.Text = string.Empty;
        errorMessage = string.Empty;
        contentWarning = null;
        StateHasChanged();
    }

    /// <summary>
    /// Class to represent content filter API response.
    /// </summary>
    private class ContentFilterResult
    {
        public bool IsApproved { get; set; }
        public List<string> ViolationWords { get; set; } = new();
    }
}